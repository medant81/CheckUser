// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: checkuser/checkuser.proto

package checkUserV1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CheckUsers_Token_FullMethodName      = "/checkUser.check_users/Token"
	CheckUsers_CheckUsers_FullMethodName = "/checkUser.check_users/check_users"
)

// CheckUsersClient is the client API for CheckUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckUsersClient interface {
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	CheckUsers(ctx context.Context, in *CheckUsersRequest, opts ...grpc.CallOption) (*CheckUsersResponse, error)
}

type checkUsersClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckUsersClient(cc grpc.ClientConnInterface) CheckUsersClient {
	return &checkUsersClient{cc}
}

func (c *checkUsersClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, CheckUsers_Token_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkUsersClient) CheckUsers(ctx context.Context, in *CheckUsersRequest, opts ...grpc.CallOption) (*CheckUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUsersResponse)
	err := c.cc.Invoke(ctx, CheckUsers_CheckUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckUsersServer is the server API for CheckUsers service.
// All implementations must embed UnimplementedCheckUsersServer
// for forward compatibility.
type CheckUsersServer interface {
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
	CheckUsers(context.Context, *CheckUsersRequest) (*CheckUsersResponse, error)
	mustEmbedUnimplementedCheckUsersServer()
}

// UnimplementedCheckUsersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCheckUsersServer struct{}

func (UnimplementedCheckUsersServer) Token(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedCheckUsersServer) CheckUsers(context.Context, *CheckUsersRequest) (*CheckUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUsers not implemented")
}
func (UnimplementedCheckUsersServer) mustEmbedUnimplementedCheckUsersServer() {}
func (UnimplementedCheckUsersServer) testEmbeddedByValue()                    {}

// UnsafeCheckUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckUsersServer will
// result in compilation errors.
type UnsafeCheckUsersServer interface {
	mustEmbedUnimplementedCheckUsersServer()
}

func RegisterCheckUsersServer(s grpc.ServiceRegistrar, srv CheckUsersServer) {
	// If the following call pancis, it indicates UnimplementedCheckUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CheckUsers_ServiceDesc, srv)
}

func _CheckUsers_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckUsersServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckUsers_Token_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckUsersServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckUsers_CheckUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckUsersServer).CheckUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CheckUsers_CheckUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckUsersServer).CheckUsers(ctx, req.(*CheckUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckUsers_ServiceDesc is the grpc.ServiceDesc for CheckUsers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckUsers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checkUser.check_users",
	HandlerType: (*CheckUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token",
			Handler:    _CheckUsers_Token_Handler,
		},
		{
			MethodName: "check_users",
			Handler:    _CheckUsers_CheckUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkuser/checkuser.proto",
}
